sensor:
  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Inverter Date Time Raw 1"
    id: inverter_datetime_raw1
    register_type: holding
    address: 62
    accuracy_decimals: 0
    value_type: U_WORD
    internal: true

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Inverter Date Time Raw 2"
    id: inverter_datetime_raw2
    register_type: holding
    address: 63
    accuracy_decimals: 0
    value_type: U_WORD
    internal: true

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Inverter Date Time Raw 3"
    id: inverter_datetime_raw3
    register_type: holding
    address: 64
    accuracy_decimals: 0
    value_type: U_WORD
    internal: true

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Device Control Board Firmware Raw 11"
    id: device_firmware_raw_11
    register_type: holding
    address: 11
    accuracy_decimals: 0
    value_type: U_WORD
    internal: true

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Device Control Board Firmware Raw 14"
    id: device_firmware_raw_14
    register_type: holding
    address: 14
    accuracy_decimals: 0
    value_type: U_WORD
    internal: true

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Device Control Board Firmware Raw 15"
    id: device_firmware_raw_15
    register_type: holding
    address: 15
    accuracy_decimals: 0
    value_type: U_WORD
    internal: true

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Device Communication Board Firmware Raw 16"
    id: device_comm_firmware_raw_16
    register_type: holding
    address: 16
    accuracy_decimals: 0
    value_type: U_WORD
    internal: true

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Device Communication Board Firmware Raw 17"
    id: device_comm_firmware_raw_17
    register_type: holding
    address: 17
    accuracy_decimals: 0
    value_type: U_WORD
    internal: true

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Device Communication Board Firmware Raw 18"
    id: device_comm_firmware_raw_18
    register_type: holding
    address: 18
    accuracy_decimals: 0
    value_type: U_WORD
    internal: true

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Device Modbus Address"
    register_type: holding
    address: 1
    unit_of_measurement: ""
    accuracy_decimals: 0
    value_type: U_WORD
    icon: "mdi:identifier"
    entity_category: diagnostic

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Device Rated Power"
    id: device_rated_power_raw
    register_type: holding
    address: 20
    unit_of_measurement: "W"
    device_class: power
    accuracy_decimals: 0
    entity_category: diagnostic
    filters:
      - multiply: 0.1
    value_type: U_DWORD_R

    icon: "mdi:flash"

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Device MPPTs"
    register_type: holding
    address: 22
    unit_of_measurement: ""
    accuracy_decimals: 0
    value_type: U_WORD
    icon: "mdi:solar-panel"

    entity_category: diagnostic
    filters:
      - lambda: |-
          uint16_t value = (uint16_t)x;
          // Extract upper nibble (bits 8-11) and shift right 8 bits
          uint16_t mppts = (value >> 8) & 0x0F;
          // Validation: if value exceeds 12 MPPTs, use default of 2
          if (mppts < 1 || mppts > 12) {
            return 2.0;
          }
          return (float)mppts;

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Device Phases"
    register_type: holding
    address: 22
    unit_of_measurement: ""
    accuracy_decimals: 0
    value_type: U_WORD
    icon: "mdi:transmission-tower"

    entity_category: diagnostic
    filters:
      - lambda: |-
          uint16_t value = (uint16_t)x;
          // Extract lower nibble (bits 0-3)
          uint16_t phases = value & 0x0F;
          // Validation: if value exceeds 3 phases, use default of 3
          if (phases < 1 || phases > 3) {
            return 3.0;
          }
          return (float)phases;

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Communications Board Failure Status"
    register_type: holding
    address: 548
    accuracy_decimals: 0
    value_type: U_WORD
    icon: "mdi:alert-circle"
    entity_category: diagnostic

binary_sensor:
  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Communications Board Flash Chip Error"
    register_type: holding
    address: 548
    bitmask: 0x01
    device_class: problem
    icon: "mdi:chip"
    entity_category: diagnostic

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Communications Board Time Error"
    register_type: holding
    address: 548
    bitmask: 0x02
    device_class: problem
    icon: "mdi:clock-alert"
    entity_category: diagnostic

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Communications Board EEPROM Error"
    register_type: holding
    address: 548
    bitmask: 0x04
    device_class: problem
    icon: "mdi:memory"
    entity_category: diagnostic

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Turn Off/On Status"
    register_type: holding
    address: 551
    bitmask: 0x1
    device_class: running
    icon: "mdi:power"

switch:
  - platform: modbus_controller
    use_write_multiple: true
    modbus_controller_id: ${modbus_controller_id}
    name: "Power Switch"
    id: switch_power
    register_type: holding
    address: 80
    bitmask: 1
    entity_category: config
    icon: "mdi:toggle-switch"

text_sensor:
  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    bitmask: 0
    register_type: holding
    response_size: 8
    address: 555
    raw_encode: NONE
    name: "Error Code"
    icon: "mdi:alert-decagram"
    entity_category: diagnostic
    lambda: |-
      if (x.size() != 8) {
        return std::string("invalid data");
      }

      // Assemble words without rotating bytes within words
      uint16_t word0 = ((uint16_t)(uint8_t)x[0] << 8) | (uint8_t)x[1];
      uint16_t word1 = ((uint16_t)(uint8_t)x[2] << 8) | (uint8_t)x[3];
      uint16_t word2 = ((uint16_t)(uint8_t)x[4] << 8) | (uint8_t)x[5];
      uint16_t word3 = ((uint16_t)(uint8_t)x[6] << 8) | (uint8_t)x[7];

      // Assemble uint64_t value; words are in little-endian order
      uint64_t value = ((uint64_t)word3 << 48) |
                      ((uint64_t)word2 << 32) |
                      ((uint64_t)word1 << 16) |
                      word0;

      switch (value) {
        case 0: return std::string("OK");
        case (1ULL << 1): return std::string("F02");         
        case (1ULL << 2): return std::string("F03");
        case (1ULL << 3): return std::string("F04");
        case (1ULL << 4): return std::string("F05");
        case (1ULL << 5): return std::string("F06");
        case (1ULL << 6): return std::string("F07");
        case (1ULL << 7): return std::string("F08");
        case (1ULL << 8): return std::string("F09");
        case (1ULL << 9): return std::string("F10");
        case (1ULL << 10): return std::string("F11");
        case (1ULL << 11): return std::string("F12");
        case (1ULL << 12): return std::string("F13");
        case (1ULL << 13): return std::string("F14");
        case (1ULL << 14): return std::string("F15");
        case (1ULL << 15): return std::string("F16");
        case (1ULL << 16): return std::string("F17");
        case (1ULL << 17): return std::string("F18");
        case (1ULL << 18): return std::string("F19");
        case (1ULL << 19): return std::string("F20");
        case (1ULL << 20): return std::string("F21");
        case (1ULL << 21): return std::string("F22");
        case (1ULL << 22): return std::string("F23");
        case (1ULL << 23): return std::string("F24");
        case (1ULL << 24): return std::string("F25");
        case (1ULL << 25): return std::string("F26");
        case (1ULL << 26): return std::string("F27");
        case (1ULL << 27): return std::string("F28");
        case (1ULL << 28): return std::string("F29");
        case (1ULL << 29): return std::string("F30");
        case (1ULL << 30): return std::string("F31");
        case (1ULL << 31): return std::string("F32");
        case (1ULL << 32): return std::string("F33");
        case (1ULL << 33): return std::string("F34");
        case (1ULL << 34): return std::string("F35");
        case (1ULL << 35): return std::string("F36");
        case (1ULL << 36): return std::string("F37");
        case (1ULL << 37): return std::string("F38");
        case (1ULL << 38): return std::string("F39");
        case (1ULL << 39): return std::string("F40");
        case (1ULL << 40): return std::string("F41");
        case (1ULL << 41): return std::string("F42");
        case (1ULL << 42): return std::string("F43");
        case (1ULL << 43): return std::string("F44");
        case (1ULL << 44): return std::string("F45");
        case (1ULL << 45): return std::string("F46");
        case (1ULL << 46): return std::string("F47");
        case (1ULL << 47): return std::string("F48");
        case (1ULL << 48): return std::string("F49");
        case (1ULL << 49): return std::string("F50");
        case (1ULL << 50): return std::string("F51");
        case (1ULL << 51): return std::string("F52");
        case (1ULL << 52): return std::string("F53");
        case (1ULL << 53): return std::string("F54");
        case (1ULL << 54): return std::string("F55");
        case (1ULL << 55): return std::string("F56");
        case (1ULL << 56): return std::string("F57");
        case (1ULL << 57): return std::string("F58");
        case (1ULL << 58): return std::string("F59");
        case (1ULL << 59): return std::string("F60");
        case (1ULL << 60): return std::string("F61");
        case (1ULL << 61): return std::string("F62");
        case (1ULL << 62): return std::string("F63");
        case (1ULL << 63): return std::string("F64");
        default:
        return std::string("?");
      }

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    bitmask: 0
    register_type: holding
    address: 500
    raw_encode: HEXBYTES
    name: "Running Status"
    icon: "mdi:play-circle"
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("standby");
        case 1: return std::string("selfcheck");
        case 2: return std::string("normal");
        case 3: return std::string("alarm");
        case 4: return std::string("fault");
        default: return std::string("----");
      }
      return x;

  - platform: template
    name: "Device Date Time"
    update_interval: 10s
    icon: "mdi:clock"
    entity_category: diagnostic
    lambda: |-
      auto raw1 = (uint16_t)id(inverter_datetime_raw1).state;
      auto raw2 = (uint16_t)id(inverter_datetime_raw2).state;
      auto raw3 = (uint16_t)id(inverter_datetime_raw3).state;

      if (isnan(id(inverter_datetime_raw1).state) || 
          isnan(id(inverter_datetime_raw2).state) || 
          isnan(id(inverter_datetime_raw3).state)) {
        return {"N/A"};
      }

      int year = 2000 + ((raw1 >> 8) & 0xFF);
      int month = raw1 & 0xFF;
      int day = (raw2 >> 8) & 0xFF;
      int hour = raw2 & 0xFF;
      int minute = (raw3 >> 8) & 0xFF;
      int second = raw3 & 0xFF;

      if (month < 1 || month > 12 || day < 1 || day > 31 || 
          hour > 23 || minute > 59 || second > 59) {
        return {"Invalid"};
      }

      char buffer[20];
      snprintf(buffer, sizeof(buffer), "%04d-%02d-%02d %02d:%02d:%02d", 
              year, month, day, hour, minute, second);
      return {buffer};

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Device Type"
    register_type: holding
    address: 0
    bitmask: 0
    raw_encode: HEXBYTES

    icon: "mdi:chip"
    entity_category: diagnostic
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0x0000: return std::string("Unknown");
        case 0x0002:
        case 0x0200: return std::string("String Inverter");
        case 0x0003:
        case 0x0300: return std::string("Single-Phase Hybrid Inverter");
        case 0x0004:
        case 0x0400: return std::string("Microinverter");
        case 0x0005:
        case 0x0500: return std::string("LV 3-Phase Hybrid Inverter");
        case 0x0006: return std::string("HV 3-Phase Hybrid Inverter");
        case 0x0007:
        case 0x0600: return std::string("HV 3-Phase Inverter 6-15kW");
        case 0x0008:
        case 0x0601: return std::string("HV 3-Phase Inverter 20-50kW");
        default: return std::string("Unknown");
      }

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Device Protocol Version"
    register_type: holding
    address: 2
    bitmask: 0
    raw_encode: NONE

    icon: "mdi:protocol"
    entity_category: diagnostic
    lambda: |-
      if (x.size() < 2) return std::string("N/A");
      uint16_t value = ((uint16_t)(uint8_t)x[0] << 8) | (uint8_t)x[1];
      char buffer[10];
      snprintf(buffer, sizeof(buffer), "%04X", value);
      return std::string(buffer);

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Device Serial Number"
    register_type: holding
    address: 3
    response_size: 10
    bitmask: 0
    raw_encode: NONE

    icon: "mdi:barcode"
    entity_category: diagnostic
    lambda: |-
      if (x.size() < 10) return std::string("N/A");
      std::string serial;

      for (int i = 0; i < 10; i += 2) {
        char high = x[i];
        char low = x[i + 1];
        if (high != 0) serial += high;
        if (low != 0) serial += low;
      }
      return serial.empty() ? std::string("N/A") : serial;

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Device MCU Board Version"
    register_type: holding
    address: 10
    bitmask: 0
    raw_encode: NONE

    icon: "mdi:memory"
    entity_category: diagnostic
    lambda: |-
      if (x.size() < 2) return std::string("N/A");
      uint16_t value = ((uint16_t)(uint8_t)x[0] << 8) | (uint8_t)x[1];
      char buffer[20];
      snprintf(buffer, sizeof(buffer), "%04X", value);
      return std::string(buffer);

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Device Arc Board Firmware Version"
    register_type: holding
    address: 12
    bitmask: 0
    raw_encode: NONE

    icon: "mdi:chip"
    entity_category: diagnostic
    lambda: |-
      if (x.size() < 2) return std::string("N/A");
      uint16_t value = ((uint16_t)(uint8_t)x[0] << 8) | (uint8_t)x[1];
      char buffer[20];
      snprintf(buffer, sizeof(buffer), "%04X", value);
      return std::string(buffer);

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Device Slave MCU Version"
    register_type: holding
    address: 13
    bitmask: 0
    raw_encode: NONE

    icon: "mdi:chip"
    entity_category: diagnostic
    lambda: |-
      if (x.size() < 2) return std::string("N/A");
      uint16_t value = ((uint16_t)(uint8_t)x[0] << 8) | (uint8_t)x[1];
      char buffer[20];
      snprintf(buffer, sizeof(buffer), "%04X", value);
      return std::string(buffer);

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Device Self-check"
    register_type: holding
    address: 36
    bitmask: 0
    raw_encode: HEXBYTES
    icon: "mdi:check-circle"
    entity_category: diagnostic
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0x0000: return std::string("Disabled");
        case 0x0001: return std::string("Enabled");
        default: return std::string("Unknown");
      }

  - platform: template
    name: "Device MAIN Firmware Version"
    icon: "mdi:chip"
    update_interval: 600s
    entity_category: diagnostic
    lambda: |-
      auto reg14 = (uint16_t)id(device_firmware_raw_14).state;
      auto reg15 = (uint16_t)id(device_firmware_raw_15).state;
      auto reg11 = (uint16_t)id(device_firmware_raw_11).state;

      if (isnan(id(device_firmware_raw_14).state) || 
          isnan(id(device_firmware_raw_15).state) || 
          isnan(id(device_firmware_raw_11).state)) {
        return {"N/A"};
      }

      char buffer[50];
      snprintf(buffer, sizeof(buffer), "%04X-%04X-%04X", reg14, reg15, reg11);
      return {buffer};

  - platform: template
    name: "Device HMI Firmware Version"
    update_interval: 600s
    icon: "mdi:chip"
    entity_category: diagnostic
    lambda: |-
      auto reg17 = (uint16_t)id(device_comm_firmware_raw_17).state;
      auto reg18 = (uint16_t)id(device_comm_firmware_raw_18).state;
      auto reg16 = (uint16_t)id(device_comm_firmware_raw_16).state;

      if (isnan(id(device_comm_firmware_raw_17).state) || 
          isnan(id(device_comm_firmware_raw_18).state) || 
          isnan(id(device_comm_firmware_raw_16).state)) {
        return {"N/A"};
      }

      char buffer[50];
      if (reg16 == 0) {
        snprintf(buffer, sizeof(buffer), "%04X-%04X", reg17, reg18);
      } else {
        snprintf(buffer, sizeof(buffer), "%04X-%04X-%04X", reg17, reg18, reg16);
      }
      return {buffer};

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Device Relay"
    register_type: holding
    entity_category: diagnostic
    address: 552
    bitmask: 0
    raw_encode: HEXBYTES
    icon: "mdi:directions-fork"
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0x0000: return std::string("Off");
        case 0x0001:
        case 0x0003: return std::string("Inverter");
        case 0x0004:
        case 0x0006: return std::string("Grid");
        case 0x0005:
        case 0x0007: return std::string("Inverter-Grid");
        case 0x0008: return std::string("Generator");
        case 0x0009:
        case 0x000B: return std::string("Inverter-Gen");
        case 0x000C:
        case 0x000E: return std::string("Grid-Generator");
        case 0x000D:
        case 0x000F: return std::string("Inv-Grid-Gen");
        default: return std::string("Power Supply");
      }

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Device Alarm"
    register_type: holding
    entity_category: diagnostic
    address: 553
    response_size: 4
    bitmask: 0
    raw_encode: NONE
    icon: "mdi:alert-outline"
    lambda: |-
      if (x.size() < 4) return std::string("N/A");

      uint16_t word1 = ((uint16_t)(uint8_t)x[0] << 8) | (uint8_t)x[1];
      uint16_t word2 = ((uint16_t)(uint8_t)x[2] << 8) | (uint8_t)x[3];
      uint32_t value = ((uint32_t)word2 << 16) | word1;

      if (value == 0) return std::string("OK");

      if (value & (1UL << 1)) return std::string("Fan failure");
      if (value & (1UL << 2)) return std::string("Grid phase failure");
      if (value & (1UL << 3)) return std::string("Meter communication failure");
      if (value & (1UL << 30)) return std::string("Battery loss");
      if (value & (1UL << 31)) return std::string("Parallel communication quality");

      return std::string("Error");

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Device Fault"
    register_type: holding
    address: 555
    response_size: 8
    bitmask: 0
    entity_category: diagnostic
    raw_encode: NONE
    icon: "mdi:message-alert-outline"
    lambda: |-
      if (x.size() < 8) return std::string("N/A");

      uint16_t word1 = ((uint16_t)(uint8_t)x[0] << 8) | (uint8_t)x[1];
      uint16_t word2 = ((uint16_t)(uint8_t)x[2] << 8) | (uint8_t)x[3];
      uint16_t word3 = ((uint16_t)(uint8_t)x[4] << 8) | (uint8_t)x[5];
      uint16_t word4 = ((uint16_t)(uint8_t)x[6] << 8) | (uint8_t)x[7];

      uint64_t value = ((uint64_t)word4 << 48) | ((uint64_t)word3 << 32) | 
                      ((uint64_t)word2 << 16) | word1;

      if (value == 0) return std::string("OK");

      if (value & (1ULL << 6)) return std::string("DC/DC Soft Start failure");
      if (value & (1ULL << 9)) return std::string("Auxiliary power supply failure");
      if (value & (1ULL << 12)) return std::string("Working mode changed");
      if (value & (1ULL << 17)) return std::string("AC Over-current failure");
      if (value & (1ULL << 18)) return std::string("Tz_Integ_Fault failure");
      if (value & (1ULL << 19)) return std::string("DC Over-current failure");
      if (value & (1ULL << 22)) return std::string("AC current leakage failure");
      if (value & (1ULL << 63)) return std::string("Temperature is too high");

      return std::string("Error");

number:
  - platform: modbus_controller
    use_write_multiple: true
    modbus_controller_id: ${modbus_controller_id}
    name: "Self Check Time"
    id: self_check_time
    register_type: holding
    address: 61
    unit_of_measurement: "s"
    min_value: 0
    max_value: 1000
    step: 1
    entity_category: diagnostic
    icon: "mdi:timer-check"
